Интересные детали PHP и MySQL

у процессора есть погрешность при операциях с типами double/float.
Простой пример http://ideone.com/0xx4UI.
decimal - процессор не знает такой тип данных, и поэтому все операции выполняются программно, а так как тип данных предназначен для работы с денежными величинами, возможность погрешности исключили.
------------
 если поле содержит NULL, то это не является никаким значением, другими словами это ничто.
Основыясь на этих двух понятиях можно написать, что
PRIMARY KEY == UNIQUE + NOT NULL , и PRIMARY KEY может быть только один.
Простой индех (KEY) содержит упорядоченные (проиндексированные) последовательности данных, такой индекс про NULL ничего не знает.
Если для поля создать UNIQUE индех и поле может содержать NULL, то записей с NULLами может быть много, а вот повторяющихся значений быть не может.
----------------
"KEY является синонимом для INDEX." - из мана.
Т.е. key == index?
-------------
CREATE TABLE `goods_lodki`							//возможно явно указать DB: db_name tbl_name


----------
попробуйте допустить ошибку в запросе. Exec не реагирует на такие ошибки. query реагирует как надо. 
Я вот голову ломаю как отлавливать ошибки exec. Он возвращает 0 или число измененных строк.
– seyfer	2 года 11 месяцев назад
Получилось такой конструкцией

$pdo_err = $p_inst->errorInfo();
if ($pdo_err[2])
{ 
throw new PDOException($pdo_err[2]);
}


-----
Как вывести ошибку, которая, если использовать обычные процедуры работы с mysql вызвывалась бы mysql_error()?
PDO->errorInfo()
PDO->errorCode()

Как узнать id последней добавленной строки (опять же используя экземпляр pdo)?
PDO->lastInsertId()

Есть что-нибудь продвинутое для экранирования и отэкранирования спецсимволов?
PDO->quote()

-----
Если не хотите вываливать ошибки в html, ставите в начале кода 

error_reporting(-1); // все ошибки, варнинги и т.д.
ini_set('display_errors', 'Off');
ini_set('log_errors', 'On');
ini_set('error_log', 'php_errors.log');
-----
// создать таблицу sql
  $sql = "CREATE TABLE users_mail (
  id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  email VARCHAR(50),
  reg_date TIMESTAMP
)";
if($db->exec($sgl) !== false) echo '<script>alert("'.$ok_table.'");location.replace("cookie.php");</script>';
Поясняю что мы создали: название таблицы users_mail, идентификатор каждой записи id INT(6), в строке email будет записываться электронный адрес пользователя не больше чем 50 символов, и последнее, дата записи в базу данных reg_date TIMESTAMP.
-----

Для преобразования символов в их коды и обратно используйте функции ord() и chr().


-----

$g_price = "40 070,50";
echo $dat1 = str_replace(" ","",$g_price); // str 40070,50
echo $dat2 = 0+str_replace(",",".",$dat1);  // float 40070.50
echo $dat3 = preg_replace("/\s/","",$g_price); // str 40070,50
var_dump($dat1, $dat2, $dat3);
-----

в своем самом простом проявлении можно сделать что-то типа

function viewInit($view) {
    $viewPath = $_SERVER['DOCUMENT_ROOT'] . '/view/' . $view . '.html';
    if(file_exists($viewPath)) {
        // если файл $view.html лежит на сервере в папочке view 
        include_once $viewPath;
    }
}
Теперь небольшой пример, допустим у нас есть шаблон top.html и шаблон foo.html

И мы пишем скрипт вывода новостей, то тогда делаем примерно следующее

Скрипт news.php

// подключение к БД
$dbResult = 'SELECT * FROM news';
$newsAll = array();
while( $row = mysql_fetch_assoc($dbResult) ) { 
    $newsAll[] = $row; // собираем все новости в массив
}
// теперь инициализируем шиблон
viewInit('newsAll'); // подключаем шаблон newsAll.
Собственно шаболон:

<!-- подключаем вер html'я -->
<?viewInit('top')?>

<!-- ну а тут какнить выведем новости -->

<div id="newsAll">
    <?foreach($newsAll as $news):?>
       <div class="newsTitlte">
         <?=$news['title']?>
       </div>
       <div class="newsContent">
         <?=$news['content']?>
       </div>
    <?endforeach?>

</div>

<!-- подключаем футер -->
<?viewInit('foo')?>
Собственно самое простое что мог придумать, если интересует ООП реализация - спрашивайте.

Именно по вопросу php кода в "чистом html'e" - по-моему находил такой модуль для апача. PS: веб сервер нужен однозначно...

PPS: как можно догадатся вложенность шаблонов может быть любая, т.е. например в том-же top.html могут подключатся другие шаблоны, например preheader, header, topnav и т.д.

-----

Нормализация.

Предлагаю ознакомится с таким понятием, как нормализация БД (1НФ, 2НФ...). Всё это необходимо для подавления избыточности - данные должны быть атомарны в рамках кортежа (записи) и атрибута (столбца).

В высоконагруженных проектах в борьбе за производительность, нормализацией искусственно пренебрегают. Таким образом, увеличивается объём отдельно взятой сущности в пользу сокращения "многоэтажности" запросов. Несомненно, необходимо проверить, стоит ли овчинка выделки и задуматься о правильности архитектуры.

Типы связей.

2-ая НФ и последующие декларируют именно это.

1:1 (один-ко-одному) - частный случай типа связи 1:М. В общем случае, есть не что иное, как атрибут (столбец);

1:M (один-ко-многим) - примером может служить заданный Вами вопрос на хэшкоде и множество ответов к нему;

М:М (многим-ко-многим) - система тегирования на хэшкоде.

Для связи двух и более таблиц принято использовать оператор Join

Индексация.

Индекс — объект базы данных, создаваемый с целью повышения производительности поиска данных (источник: wiki).

Для всех тех атрибутов (столбцов), которые указаны в условии запроса WHERE, необходимо добавить индекс для быстрого поиска. Добавление индекса влечёт за собой накладные расходы на объём, потому такой выборочный подход.

Один из механизмов добавление индекса с помощью веб-клиента phpMyAdmin: alt text

Все тонкости составных индексов и при использовании оператора LIKE я Вам оставляю на самостоятельное изучение.

-----

добавил индексы 2 полям
ALTER TABLE `Categ_link` ADD FOREIGN KEY (`id_prod`) REFERENCES `midnigli_lodki`.`lodki_products`(`id`) ON DELETE RESTRICT ON UPDATE RESTRICT; ALTER TABLE `Categ_link` ADD FOREIGN KEY (`id_categ`) REFERENCES `midnigli_lodki`.`lodki_category`(`id_categ`) ON DELETE RESTRICT ON UPDATE RESTRICT;

внесение данных
INSERT INTO `midnigli_lodki`.`Categ_link` (`id`, `id_prod`, `id_categ`) VALUES (NULL, '3', '1');

Изменяем содержимое ячейки
UPDATE `midnigli_lodki`.`Categ_link` SET `id_prod` = '22' WHERE `Categ_link`.`id` = 2;


Для создания связанных таблиц нужно проиндексировать связываемые поля (только проиндексированные можно связать)
Создаем индекс 
ALTER TABLE `table_name` ADD INDEX ( `field_name` ) ;

ALTER TABLE `table_name` ADD FOREIGN KEY ( `field_in_table_name_which_need_connect` ) REFERENCES `outer_table_to_connect` (`outer_field`) ON DELETE RESTRICT ON UPDATE RESTRICT ;

PDO::MYSQL_ATTR_USE_BUFFERED_QUERY

SELECT (tab1.field1, tab2.field2) FROM tab1 LEFT JOIN tab2 ON tab1.field1=tab2.field1 WHERE tab1.field2=value AND tab2.field2=value2 (ORDER, GROUP и др.)


SELECT p.id, p.title, p.description, p.price, pc.id_prod AS prod_categ_link, c.category AS category FROM products p INNER JOIN prod_categ_link pc ON p.id=pc.id_prod LEFT JOIN category c ON c.id=pc.id_cat ORDER BY p.id

-----

что такое алиас таблицы в MySQL и зачем оно надо?

Это не MySQL-специфичная фича, это элемент языка SQL.
Служит для того, чтобы к таблице в пределах данного SQL-запроса можно было обращаться по другому имени.
Обычно применяется:
а) в целях повышения читаемости запросов
б) в целях многократного использования одной и той же таблицы в одном запросе.
в) для именования подзапросов (в MySQL это обязательно, в отличие от других СУБД).

Добавлю, что если таблице назначен алиас, то ссылаться на нее можно уже только по имени алиаса, но не по имени самой таблицы.


JOIN Syntax (http://dev.mysql.com/doc/refman/5.0/en/join.html)
# A table reference can be aliased using tbl_name AS alias_name or tbl_name alias_name:

SELECT t1.name, t2.salary
FROM employee AS t1 INNER JOIN info AS t2 ON t1.name = t2.name;

SELECT t1.name, t2.salary
FROM employee t1 INNER JOIN info t2 ON t1.name = t2.name;

# A table_subquery is also known as a subquery in the FROM clause. Such subqueries must include an alias to give the subquery result a table name. A trivial example follows; see also Section 12.2.9.8, “Subqueries in the FROM Clause”.

SELECT * FROM (SELECT 1, 2, 3) AS t1;


примерчик
http://sql.ru/forum/actualthread.aspx?tid=673910

-----

Поскольку практически КАЖДЫЙ мануал по PDO считает своим долгом продемонстрировать в корне неверный способ обработки исключений, я должен сделать специальное пояснение. 
Обычно пример выглядит как-то так
try {
    $dbh = new PDO($dsn, $user, $password);
} catch (PDOException $e) {
    die('Подключение не удалось: ' . $e->getMessage());
}
Так вот, дети, запомните: так делать не надо НИКОГДА. 
Для того, чтобы всего лишь показать ошибку, try..catch используют только дураки:
- во-первых, этот код избыточен: РНР покажет ошибку и так, безо всяких try..catch.
- во-вторых, этот код гораздо менее гибкий: он выводит ошибку ТОЛЬКО на экран, в то время как исключение улетит туда же, куда и все остальные ошибки: либо в лог файл, либо на экран, в зависимости от глобальных настроек.
- в-третьих, этот код лишает нас возможности обрабатывать все ошибки централизованно, в едином exception handler-е. 

Поэтому использовать try..catch нужно только тогда, когда вы собираетесь ОБРАБОТАТЬ ошибку - то есть, совершить какое-то действие, связанное с ФАКТОМ ошибки - откатить транзакцию, например. Для того же, чтобы просто выдать сообщение об ошибке, try..catch использовать не нужно - PHP прекрасно справится сам

-----

Если в запрос не передаются никакие переменные, то можно воспользоваться функцией query(). 
Она выполнит запрос и вернёт специальный объект — PDO statement. 
Очень грубо можно его сравнить с mysql resource, который возвращала mysql_query(). 
Получить данные из этого объекта можно как традиционным образом, через while, так и через foreach(). 
Также можно попросить вернуть полученные данные в особом формате, о чем ниже.

$stmt = $pdo->query('SELECT name FROM users');
while ($row = $stmt->fetch())
{
    echo $row['name'] . "\n";
}

-----


Идентификатор	Максимальная длина строки	Допускаемые символы
База данных	64	Любой символ, допустимый в имени каталога, за исключением `/', `\' или `.'
Таблица	64	Любой символ, допустимый в имени файла, за исключением `/' или `.'
Столбец	64	Все символы
Псевдоним	255	Все символы

-----

javascript - Как изменить значение атрибута value в теге input?

pure_js:

document.getElementById('someInputId').value = 'changed Value';
jQuery:

$('#someInputId').val('changed Value');

-----
alt + shift + K = ASCII-Decorator

-----

$_POST['company'] =  substr(htmlspecialchars(trim($_POST['company'])), 0, 1000);

-----

$headers = "From: My Site <info@mysite.com>\r\n"; 
$headers .= "To: Whoever <whoever@othersite.com>\r\n"; 
$headers .= "X-Sender: <info@mysite.com>\r\n"; 
$headers .= "Reply-To: $contactEmail\r\n";  
$headers .= "MIME-Version: 1.0\r\n";  
$headers .= "Content-Type: text/html; charset=iso-8859-1\r\n";  
$headers .= "X-Mailer: PHP4\r\n";   
$headers .= "X-Priority: 3\r\n";  
$headers .= "Return-Path: <info@mysite.com>\r\n"; 

-----

$checkbox = $_POST['checkbox'];
$new_arr = array(); // Массив для сохранения отфильтрованных значений
if (is_array($checkbox)) // Проверяем, является ли переменная массивом
{
foreach ($checkbox as $value)
{
$value = intval($value);
if ($value) $new_arr[] = $value; // не допускаем нули
}
}

Можно заменить на
$new_arr = array_filter(array_map('intval', $_POST['checkbox']));

-----

Куки лучше подписывать соленым хешем, при их отправке браузеру. Т.е. если нужно записать в куки значение
Cookie::getinstance()->set('key', 'value');

то в методе set к value, через разделитель, конкатенировать хеш этого значения, например md5('value'.md5(Cookie::$salt));, а сразу при обработке запроса проверять валидна ли подпись куки, и если нет — тереть такую куку, тогда для всего остального приложения ее просто не будет существовать.

-----

Зачем при подключении файла из $_GET[...] делать switch? o_O. Почему бы не воспользоваться:
if( in_array( $_GET[...], array( 'some', 'other' ), true ) )
{
    include ...;
}

мне кажется тут:
if (!$_POST['secret_key'] OR $_POST['secret_key'] != $secret_key)

Необходимо проверять строго $_POST['secret_key'] !== $secret_key.

-----

Админить VPS кто будет? Клиент?
0 unity_ultra_hardcore30 апреля 2012 в 05:11#↵↑
Ну, например, Clodo или сраный FirstVDS даёт ISPManager. То ли бесплатно, то ли за какие-то копейки. Есть куча всяких панелек, которые не хуже хостерских.
0 VolCh30 апреля 2012 в 20:39#↵↑
Вариант, конечно, но какой-то неполноценный, по-моему. Ставить LAMP через консоль или панельку разницы особо не вижу, и там, и там конфиги дефолтные будут. А на хостингах — хочется надеяться, — тюнят их, причём не «настроили и забыли», а анализируя текущуюобстановку.
0 unity_ultra_hardcore30 апреля 2012 в 20:42#↵↑
Человеку, которому хватает шаред-хостинга по барабану на конфиги, не?
0 VolCh30 апреля 2012 в 21:27#↵↑
Ну, он рассчитывает, что они нормально настроены, особенно лимиты мускула по памяти и прочие буфера. Чтоб и память без дела не стояла и в своп не уходила (если он есть).

-----

1. Юзайте PDO
2. Юзайте filter_var / filter_input / etc.
3. Не изобретайте велосипеды

Так что совет — используйте подготовленные выражения. А еще лучше популярные абстракции над уровнем даннных — это позволит избежать возможных проблем при миграции, а также снимет часть типовых задач.

filter_var

О встроенный валидатор email в php я уже однажды обжегся. После этого везде использую валидатор yii(выдранный или вместе с фреймворком — в завсимости от ситуации).

-----

совет в вопросе безопасности — один: если вы хотите в явном виде написать в коде бизнес-логики вызов функции экранирования/фильтрации, вы уже дорускаете серьезнейшую архитектурную ошибку. Поэтому перепишите код так, чтобы экранирование в явном виде вообще нигде применять не нужно было бы (кроме сАмого низкоуровневого, самого последнего, библиотечного слоя, который очень мал и пишется 1 раз, и в котором злосчастная функция экранирования упоминается всего незколько раз, независимо от размера проекта). Только так можно защититься от инъекций (это касается, кстати, и xss тоже).

Иными словами, число вызовов функций фильтрации/экранирования должно быть константным и не зависеть от размера проекта (если вдруг имеет место пропорциональность или другая зависимость — это плохо).

-----

if (count($checkbox)) // Проверяем, является ли переменная массивом

Это вообще жесть, а не проверка. count() возвращает 1 почти для любых значений, в том числе для false и пустых строк. 0 будет возвращен только для пустого массива и null значения.
+4 Stdit30 апреля 2012 в 01:10#
Зачем использовать голый mysql? Зачем хранить инклуд-php-файлы в докруте и тем более разрешать к ним http доступ? Почему секретку хранить надо в аргументах, а не в куке (как яндекс.бар сливал такие урлы, помните?) Почему надо выводить ошибки в браузер, когда для этого есть error_log, set_error_handler и tail -f? Пережитки шард-хостингов без доступа к логам? Это скорее частный случай, требующий особого подхода.

-----

Если что, я имел в виду, что кеширование — является основой оптимизации только для php. Для языков вида C, C++, Delphi; C#, Java — это не так.

Парадигмы этих языков отличны от php тем, что контекст исполнения разных запросов (если уж о вебе говорить) — единый, что «принуждает» по умолчанию всё оставлять в ОП, что в контексте php — является кешированием.
0 VolCh30 апреля 2012 в 20:34#↵↑
Лучше хранить оригинал в БД, а, если нужно, форматировать в кеш или при записи, или при первом запросе. Кеш может быть и в БД, в той же таблице, что оригинал, например, comment.body и comment.body_safe_html.

В данном случае практической разницы вроде никакой по сравнению с «форматировать на входе, и дублировать оригинал» — те же два столбца, но идеологически или, если угодно, архитектурно, очень отличается — храним оригинал в raw и дублируем его с целью повышения производительности заранее форматированным и/или санированным для какого-то конкретного формата вывода. Просто надо понимать, что comment.body — это собственно данные, а comment.body_safe_html — это кеш конкретного их представления.

-----

CSRF, Cross-site Request Forging
Формирование на сайте хакера запроса, который будет выполнен браузером пользователя (и, как следствие - со всеми правами пользователя!). То есть, просто авторизация от этой атаки не спасает. Для защиты от этого типа атак следвет взять за правило добавлять ко всем важным формам скрытое поле, содержащее уникальную строку (сгенерированную случайным образом только для этой формы), записывать её в сессию и сравнивать при обработке формы. Хакер добавить такую строку в свою форму не сможет, и атака не сработает.

-----

